/// Paths
data Path = java org.metaborg.pipeline.util.Path {
  func uri() : string
  
  func resolve(string) : Path
  func resolveWithExt(path : string, ext : string) : Path
}
func read(file : Path) : text : string = pluto org.metaborg.pipeline.builder.generic.Read
func copy(from : Path, to : Path) : to : Path = pluto org.metaborg.pipeline.builder.generic.Copy

/// Languages
transient data LangImpl = java org.metaborg.core.language.ILanguageImpl {
  func id() : LangId
}
data LangId = java org.metaborg.core.language.LanguageIdentifier {}
func load-lang(location : Path) : langImpl : LangImpl = pluto org.metaborg.pipeline.builder.spoofax.LoadLang


/// Projects
transient data Project = java org.metaborg.core.project.IProject {}
func load-proj(location : Path) : project : Project = pluto org.metaborg.pipeline.builder.spoofax.LoadProject
func project-path(project : Project) : location : Path = java org.metaborg.pipeline.util.Path#projectPath


/// Parsing
data Ast = java org.spoofax.interpreter.terms.IStrategoTerm {}
func parse(langId : LangId, file : Path, text : string) : ast : Ast? = pluto org.metaborg.pipeline.builder.spoofax.Parse


/// Analysis
func analyze(langId : LangId, project : Path, file : Path, ast : Ast?) : ast : Ast? = pluto org.metaborg.pipeline.builder.spoofax.Analyze


/// Transformation
data Goal = java org.metaborg.core.action.ITransformGoal {}

data CompileGoal : Goal = java org.metaborg.core.action.CompileGoal {}
func make-compile-goal() : CompileGoal = java org.metaborg.pipeline.util.GoalUtil#makeCompileGoal

data NamedGoal : Goal = java org.metaborg.core.action.EndNamedGoal {}
func make-named-goal(string) : NamedGoal = java org.metaborg.pipeline.util.GoalUtil#makeNamedGoal

func transform(langId : LangId, project : Path, file : Path, ast : Ast?, goal : Goal) : ast : Ast?, writtenFile : Path? = pluto org.metaborg.pipeline.builder.spoofax.Trans


/// Sdf2Table
func sdf2table(input : Path?, output : Path) : output : Path = pluto org.metaborg.pipeline.builder.spoofax.sdf.Sdf2Table


/// Configuration build
func build-lang-config(langSpec : Path) : = {
  config : Path = langSpec.resolve("metaborg.yaml");
  output : Path = langSpec.resolve("src-gen/metaborg.component.yaml");
  copy(config, output);
}


/// ESV build 
func build-lang-esv(langSpec : Path, pathToEsvLanguage : Path) : = {
  mainPath : Path     = langSpec.resolve("editor/Main.esv");
  text     : string   = read(mainPath);
  
  lang   : LangImpl = load-lang(pathToEsvLanguage);
  langId : LangId   = lang.id();
  ast    : Ast?     = parse(langId, mainPath, text);
  if(ast == null) {
    // TODO: ast can be null, need to fail this function call here.
  }

  project     : Project = load-proj(langSpec);
  projectPath : Path    = project-path(project);

  goal : Goal = make-compile-goal();
  transform(langId, projectPath, mainPath, ast, goal);
}


/// SDF build
func build-lang-sdf(langSpec : Path, sdf : Path, langName : string) : = {
  synPath   : Path     = langSpec.resolve("syntax");
  mainPath  : Path     = synPath.resolveWithExt(langName, "sdf3");
  text      : string   = read(mainPath);
  
  lang      : LangImpl = load-lang(sdf);
  langId    : LangId   = lang.id();
  parsedAst : Ast?     = parse(langId, mainPath, text);
  if(parsedAst == null) {
    // TODO: fail build
  }

  project     : Project = load-proj(langSpec);
  projectPath : Path    = project-path(project);
  analyzedAst : Ast?    = analyze(langId, projectPath, mainPath, parsedAst);
  if(analyzedAst == null) {
    // TODO: fail build
  }

  goal : Goal = make-named-goal("to Normal Form (abstract)");
  _ : Ast?, normalizedSdfPath : Path? = transform(langId, projectPath, mainPath, analyzedAst, goal);

  parseTablePath : Path = langSpec.resolve("target/metaborg/sdf.tbl");
  outputPath     : Path = sdf2table(normalizedSdfPath, parseTablePath);
}


/// Parsing
func parse-program(langSpec : Path, file : Path) : ast : Ast? = {
  text   : string   = read(file);
  lang   : LangImpl = load-lang(langSpec);
  langId : LangId   = lang.id();
  ast    : Ast?     = parse(langId, file, text);
  return ast;
}


/// Pipeline combiner
func pipeline(langSpec: Path, langName : string, esv : Path, sdf : Path, file : Path) : ast : Ast? = {
  build-lang-config(langSpec);
  build-lang-esv(langSpec, esv);
  build-lang-sdf(langSpec, sdf, langName);
  ast : Ast? = parse-program(langSpec, file);
  return ast;
}
