module java

rules // Java data definition implementation

  [[ JDataImpl(id_class_java, membs) ^ (s, ty_type_outer) ]] :=
    ty_type_outer == DataTy(occ_type_outer),
    occ_type_outer.javaClassId := id_class_java !,
    occ_type_outer.kind := JavaTypeKind() !,
    Map1 [[ membs ^ (s) ]].

  [[ JFuncDef(FuncHead(id_func, params, ty_out)) ^ (s) ]] :=
    Func{id_func} <- s,
    [[ params ^ (s) : tys_in ]],
    [[ ty_out ^ (s) : ty_out_bound ]],
    ty == FuncTy(tys_in, ty_out_bound),
    Func{id_func} : ty !.

rules // Java static function implementation

  [[ JStaticFuncImpl(id_class_java, id_method_java) ^ (s, _, occ_func_outer) ]] :=
    occ_func_outer.kind         := JavaStaticFuncKind() !,
    occ_func_outer.javaClassId  := id_class_java !,
    occ_func_outer.javaMethodId := id_method_java !.
