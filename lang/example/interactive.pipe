func normalize-sdf(file: path, includeDirs: path*) -> path = {
  requires file;
  requires dir with extension "sdf"; | dir <- includeDirs;
  val normFile = file.replaceExtension("norm");
  val depFile = file.replaceExtension("dep");
  exec(["sdf2normalized"] + "$file" + ["-I$dir" | dir <- includeDirs] + "-o$normFile" + "-d$depFile");
  requires dep by hash; | dep <- extract-deps(depFile);
  generates normFile;
  return normFile;
}
func extract-deps(depFile: path) -> path* = foreign java mb.pipe.run.ceres.sdf#extractdeps
func generate-table(normFiles: path*, outputFile: path) -> path = {
  requires file by hash; | file <- normFiles;
  exec(["sdf2table"] + ["$file" | file <- normFiles] + "-o$outputFile");
  generates outputFile;
  return outputFile;
}

func exec(arguments: string*) -> (string, string) = foreign java mb.pipe.run.ceres.process#execute


data Ast = foreign java org.spoofax.interpreter.terms.IStrategoTerm {}
data Token = foreign java mb.pipe.run.core.model.parse.Token {}
data ParseTable = foreign java mb.pipe.run.spoofax.sdf.Table {}
func table2object(text: string) -> ParseTable = foreign bla
func parse(text: string, table: ParseTable) -> (Ast, Token*) = foreign mb.pipe.run.ceres.spoofax.Parse

data Styling = foreign java mb.pipe.run.core.model.style.Styling {}
func style(tokenStream: Token*) -> Styling = foreign mb.pipe.run.ceres.spoofax.Style

func update-editor(text: string) -> Styling = {
  val sdfFiles = [./lexical.sdf, ./contextfree.sdf];
  val normFiles = [normalize-sdf(file, [./include]) | file <- sdfFiles];
  val parseTableFile = generate-table(normFiles, ./parse.tbl);
  val parseTable = table2object(read parseTableFile);
  val (ast, tokenStream) = parse(text, parseTable);
  return style(tokenStream);
}
