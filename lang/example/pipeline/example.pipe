/// Generic library
data Context = java mb.pipe.run.core.model.Context {
  func currentDir() -> Path
}
// Path
data Path = java mb.pipe.run.core.path.PPath {
  func resolve(string) -> Path
}
func readFile(Path) -> string = ceres mb.pipe.run.ceres.path.Read
func resolveAbs(string) -> Path = kotlin mb.pipe.run.ceres.path#resolve


/// Interface that Spoofax expects from a language
data Message = java mb.pipe.run.core.model.message.Msg {}
data Ast = java org.spoofax.interpreter.terms.IStrategoTerm {}
data Token = java mb.pipe.run.core.model.parse.Token {}
// func parse(text : string, context : Context) -> (Ast?, Token*?, Message*)

data Styling = java mb.pipe.run.core.model.style.Styling {}
// func style(tokenStream : Token*, context : Context) -> Styling


/// Library with functions to build SDF and ESV specifications
data ParseTable = java mb.pipe.run.spoofax.sdf.Table {}
func sdf2table(langLoc : Path, specDir : Path, mainFile : Path, includedFiles : Path*) -> ParseTable? = ceres mb.pipe.run.ceres.spoofax.GenerateTable
func jsglrParse(text : string, startSymbol : string, pt : ParseTable) -> (Ast?, Token*?, Message*) = ceres mb.pipe.run.ceres.spoofax.Parse

data SyntaxStyler = java mb.pipe.run.spoofax.esv.StylingRules {}
func esv2styler(langLoc : Path, specDir : Path, mainFile : Path, includedFiles : Path*) -> SyntaxStyler? = ceres mb.pipe.run.ceres.spoofax.GenerateStylerRules
func esvStyle(tokenStream : Token*, st : SyntaxStyler) -> Styling = ceres mb.pipe.run.ceres.spoofax.Style


/// Implement parse and style
func parse(text : string, context : Context) -> (Ast?, Token*?, Message*) = {
  var currentDir = context.currentDir();
  var langLoc = resolveAbs("/Users/gohla/.m2/repository/org/metaborg/org.metaborg.meta.lang.template/2.3.0-SNAPSHOT/org.metaborg.meta.lang.template-2.3.0-SNAPSHOT.spoofax-language");
  var specDir = currentDir; 
  var mainFile = currentDir.resolve("syntax/minimal.sdf3");
  var includedFiles : Path* = [];

  var parseTable = sdf2table(langLoc, specDir, mainFile, includedFiles);
  if(parseTable == null) fail "Unable to build parse table";
  
  return jsglrParse(text, "Start", parseTable!);
}

func style(tokenStream : Token*, context : Context) -> Styling = {
  var currentDir = context.currentDir();
  var langLoc = resolveAbs("/Users/gohla/.m2/repository/org/metaborg/org.metaborg.meta.lang.esv/2.3.0-SNAPSHOT/org.metaborg.meta.lang.esv-2.3.0-SNAPSHOT.spoofax-language");
  var specDir = currentDir;
  var mainFile = currentDir.resolve("editor/Main.esv");
  var includedFiles : Path* = [];
  
  var syntaxStyler = esv2styler(langLoc, specDir, mainFile, includedFiles);
  if(syntaxStyler == null) fail "Unable to build syntax styler";
  
  return esvStyle(tokenStream, syntaxStyler!);
}


/// Processing
// Files
func processFile(file : Path, context : Context) -> (Path, string, Ast?, Token*?, Message*, Styling?) = {
  var text = readFile(file); // Creates a dependency to file changes
  var (_, ast, tokenStream, messages, styling) =  processString(text, context);
  return (file, text, ast, tokenStream, messages, styling);
}

// Strings
func processString(text : string, context : Context) -> (string, Ast?, Token*?, Message*, Styling?) = {
  var (ast, tokenStream, messages) = parse(text, context);
  var styling : Styling?;
  if(tokenStream != null) {
    styling = style(tokenStream!, context);
  } else {
    styling = null;
  }
  return (text, ast, tokenStream, messages, styling);
}
