func main(compileFlags: string*) -> string = {
  val files : path* = [./src/lib.c, ./test/check_lib.c];
  val includeDirs   = [./src/];
  val objectFiles   = [compile(file, includeDirs, compileFlags) | file <- files];
  
  val linkFlags = ["-lc", "-lcrt1.10.5.o", "-lcheck"];
  val testExe = link(objectFiles, ./bin/test, linkFlags);
  
  return test(testExe);
}

func compile(file: path, includeDirs: path*, flags: string*) -> path = {
  requires file;
  requires dir with extension "h"; | dir <- includeDirs;
  
  val objectFile = file.replaceExtension("o");
  exec(["clang"] + "$file" + ["-I$dir" | dir <- includeDirs] + "-o$objectFile" + "-c" + "-MMD" + flags);
  generates objectFile;
  
  val depFile = file.replaceExtension("d");
  requires dep by hash; | dep <- extractCompileDeps(depFile);
  
  return objectFile;
}

func extractCompileDeps(depFile: path) -> path* = foreign java mb.pipe.run.ceres.clang#extractCompileDeps

func link(inputFiles: path*, outputFile: path, flags: string*) -> path = {
  requires file by hash; | file <- inputFiles;
  exec(["ld"] + ["$file" | file <- inputFiles] + "-o" + "$outputFile" + flags);
  generates outputFile;
  return outputFile;
}

func test(testExe: path) -> string = {
  requires testExe by hash;
  val (testReport, _) = exec(["$testExe"]);
  return testReport;
}

func exec(arguments: string*) -> (string, string) = foreign java mb.pipe.run.ceres.process#execute
