/// Generic library
// Resource
data Resource = java mb.pipe.run.core.vfs.IResource {
  func uri() -> string
  
  func resolve(string) -> Resource
  func resolveWithExt(uri : string, ext : string) -> Resource
}
func readFile(Resource) -> string = pluto mb.pipe.run.pluto.vfs.Read
func resolve(string) -> Resource = java mb.pipe.run.core.vfs.VFSResource#resolveStatic
func resolveAll(string*) -> Resource* = java mb.pipe.run.core.vfs.VFSResource#resolveAllStatic


/// Interface that Spoofax expects from a language
data Message = java mb.pipe.run.core.model.message.IMsg {}
data Ast = java org.spoofax.interpreter.terms.IStrategoTerm {}
data Token = java mb.pipe.run.core.model.parse.IToken {}
// func parse(text : string) -> (Ast?, Token*?, Message*)


/// Library with functions to build SDF and ESV specifications
data ParseTable = java mb.pipe.run.spoofax.sdf.Table {}
func sdf2table(langLoc : Resource, specDir : Resource, mainFile : Resource, includedFiles : Resource*) -> ParseTable? = pluto mb.pipe.run.pluto.sdf.GenerateTable
func jsglrParse(text : string, startSymbol : string, pt : ParseTable) -> (Ast?, Token*?, Message*) = pluto mb.pipe.run.pluto.sdf.Parse


/// Implement parse and style
func parse(text : string) -> (Ast?, Token*?, Message*) = {
  var langLoc = resolve("/Users/gohla/.m2/repository/org/metaborg/org.metaborg.meta.lang.template/2.2.0/org.metaborg.meta.lang.template-2.2.0.spoofax-language");
  var specDir = resolve(".");  
  var mainFile = resolve("syntax/minimal.sdf3");
  var includedFiles : Resource* = [];
  //var includedFiles = resolveAll(["syntax/Common.sdf3", "syntax/stuff.sdf3"]);
  var parseTable = sdf2table(langLoc, specDir, mainFile, includedFiles);
  if(parseTable == null) fail "Unable to build parse table";
  
  return jsglrParse(text, "Start", parseTable!);
}


/// Implement pipelines
// File pipeline
func filePipeline(file : Resource) -> (Ast?, Token*?, Message*) = {
  var text = readFile(file); // Creates a dependency to file changes
  var (ast, tokenStream, messages) = parse(text);
  return (ast, tokenStream, messages);
}

func main() -> (Ast?, Token*?, Message*) = {
  var file = resolve("example/test.min");
  return filePipeline(file);
}