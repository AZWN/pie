module gen/kotlin/func_body

imports

  libspoofax/stratego/debug
  nabl2/api

  signatures/-
  signatures/lex/-
  signatures/impl/-
  
  statsem/pie
  
  gen/kotlin/func
  gen/kotlin/binder
  gen/kotlin/type
  gen/idtype-tuples
  gen/util
  gen/debug

rules 

  try-p2k-exp = pie-try-debug(p2k-exp|"p2k-exp") <+ !"Any()"
  
rules // Expression composition

  p2k-exp:
    Block(exps) -> 
$[run {
  [str]
}]
    with
      str := <map(try-p2k-exp); pie-sep-concat(|";\n")> exps

rules // Unary expressions
  
  p2k-exp:
    ToNullable(exp) -> <p2k-exp> exp
    where
      NullableTy(ty) := <pie-ast-type> exp

  p2k-exp:
    ToNullable(exp) -> $[[expStr] as [tySig]?]
    with
      ty := <pie-ast-type> exp
    where
      not(NullableTy(_) := ty)
    with
      tySig  := <p2k-type-sig> ty
    ; expStr := <p2k-exp> exp

  p2k-exp:
    ToNonNullable(exp) -> $[[expStr]!!]
    with
      expStr := <p2k-exp> exp


  p2k-exp:
    Not(exp) -> $[![expStr]]
    with
      expStr := <p2k-exp> exp

rules // Binary expressions

  p2k-binexp(|symbol):
    (lExp, rExp) -> $[[lExpStr] [symbol] [rExpStr]]
    with
      lExpStr := <try-p2k-exp> lExp
    ; rExpStr := <try-p2k-exp> rExp
  
  p2k-exp: Eq(lExp, rExp) -> <p2k-binexp(|"==")> (lExp, rExp)
  p2k-exp: Neq(lExp, rExp) -> <p2k-binexp(|"!=")> (lExp, rExp)
  p2k-exp: Lor(lExp, rExp) -> <p2k-binexp(|"||")> (lExp, rExp)
  p2k-exp: Land(lExp, rExp) -> <p2k-binexp(|"&&")> (lExp, rExp)

rules // Control flow

  p2k-exp:
    If(condExp, exp) -> $[if([condExpStr]) [expStr]]
    with
      condExpStr := <try-p2k-exp> condExp
    ; expStr     := <try-p2k-exp> exp

  p2k-exp:
    IfElse(condExp, trueExp, falseExp) -> $[if([condExpStr]) [trueExpStr] else [falseExpStr]]
    with
      condExpStr  := <try-p2k-exp> condExp
    ; trueExpStr  := <try-p2k-exp> trueExp
    ; falseExpStr := <try-p2k-exp> falseExp

  p2k-exp:
    Add(lExp, rExp) -> $[[lExpStr] + [rExpStr]]
    with
      lExpStr := <try-p2k-exp> lExp
    ; rExpStr := <try-p2k-exp> rExp


  p2k-exp:
    e@ListComprehension(mapExp, binder, listExp) -> $[[listExpStr].map {[binderStr] -> [mapExpStr]}.toCollection([tyStr]())]
    with
      mapExpStr  := <try-p2k-exp> mapExp
    ; binderStr  := <p2k-binder> binder
    ; listExpStr := <try-p2k-exp> listExp
    ; ty         := <pie-ast-type> e
    ; tyStr      := <p2k-type-sig> ty

rules // Binding

  p2k-exp:
    ValDec(binder, exp) -> $[val [binderStr] = [expStr]]
    with
      binderStr := <p2k-binder> binder
    ; expStr    := <try-p2k-exp> exp

rules // References

  p2k-exp:
    r@Ref(varId) -> <p2k-ref-add-transient-val(|varId)> r 
    where
      LocalVarKind() := <pie-ast-ref-prop(|"Var", "kind")> varId
  
  p2k-exp: 
    Ref(varId) -> <fail>
    where
      InputVarKind() := <pie-ast-ref-prop(|"Var", "kind")> varId
    ; 0 := <InputKind>
      
  p2k-exp: 
    r@Ref(varId) -> <p2k-ref-add-transient-val(|"input")> r
    where
      InputVarKind() := <pie-ast-ref-prop(|"Var", "kind")> varId
    ; 1 := <InputKind>
      
  p2k-exp: 
    r@Ref(varId) -> <p2k-ref-add-transient-val(|$[input.[varId]])> r
    where
      InputVarKind() := <pie-ast-ref-prop(|"Var", "kind")> varId
    ; 2 := <InputKind>

  p2k-ref-add-transient-val(|str):
    ref -> $[[str].v]
    where
      <p2k-ref-is-transient> ref
    
  p2k-ref-add-transient-val(|str):
    ref -> str
    where
      <not(p2k-ref-is-transient)> ref
  
  p2k-ref-is-transient = 
      pie-ast-type
    ; (?DataTy(<id>) <+ ?NullableTy(DataTy(<id>)))
    ; pie-occ-prop(|"mods")
    ; collect-one(?Transient())

rules // Java foreign function calls

  p2k-exp:
    Call(funcId, exps) -> $[[javaClassId].[javaMethodId]([expStr])]
    where
      JavaForeignFuncKind() := <pie-ast-ref-prop(|"Func", "kind")> funcId
    with
      javaClassId  := <pie-ast-ref-prop(|"Func", "javaClassId")> funcId
    ; javaMethodId := <pie-ast-ref-prop(|"Func", "javaMethodId")> funcId
    ; expStr       := <map(try-p2k-exp); pie-concat-comma> exps

rules // Qualified function calls

  p2k-exp: 
    QCall(exp, funcId, argsExps) -> $[[expStr].[funcId]([argsExpStr])]
    with
      argsExpStr := <map(try-p2k-exp); pie-concat-comma> argsExps
    ; expStr     := <try-p2k-exp> exp

rules // PIE function calls
  
  p2k-exp:
    c@Call(funcId, _) -> <p2k-exp-pie-call(|javaClassId)> c
    where
      PieForeignFuncKind() := <pie-ast-ref-prop(|"Func", "kind")> funcId
    with
      javaClassId := <pie-ast-ref-prop(|"Func", "javaClassId")> funcId
    
  p2k-exp: 
    c@Call(funcId, _) -> <p2k-exp-pie-call(|javaClassId)> c 
    where
      PieFuncKind() := <pie-ast-ref-prop(|"Func", "kind")> funcId
    with
      javaClassId := <pie-sanitize-class-id> funcId


  p2k-exp-pie-call(|javaClassId):
   Call(funcId, exps) -> $[requireOutput([javaClassId]::class.java, [javaClassId].id, [expStr])]
    with
      expStr := <p2k-exp-pie-call-inputexp(|javaClassId)> exps


  p2k-exp-pie-call-inputexp(|javaClassId):
    exps -> "None.instance"
    where
      0 := <length> exps

  p2k-exp-pie-call-inputexp(|javaClassId):
    exps -> expStr
    where
      1 := <length> exps
    with
      [exp]  := exps
    ; expStr := <try-p2k-exp> exp
    
  p2k-exp-pie-call-inputexp(|javaClassId):
    exps -> $[[javaClassId].Input([expStr])]
    where
      length := <length> exps
    ; <gt> (length, 1)
    with
      expStr := <map(try-p2k-exp); pie-concat-comma> exps

rules // Path operations

  p2k-exp:
    RequiresPath(exp, filterOpt, stamper) -> $[require([expStr], [stamperStr])]
    with
      expStr     := <p2k-exp> exp
    ; stamperStr := <p2k-stamper> (filterOpt, stamper)

  p2k-exp:
    GeneratesPath(exp, stamper) -> $[generate([expStr], [stamperStr])]
    with
      expStr     := <p2k-exp> exp
    ; stamperStr := <p2k-stamper> (None(), stamper)
  
  p2k-stamper:
    (None(), Modified()) -> "PathStampers.modified"
  p2k-stamper:
    (None(), Hash()    ) -> "PathStampers.hash"
  p2k-stamper:
    (filter, Modified()) -> $[PathStampers.modified([filterStr])]
    where
      <not(?None())> filter
    with
      filterStr := <p2k-filter-match> filter
  p2k-stamper:
    (filter, Hash()) -> $[PathStampers.hash([filterStr])]
    where
      <not(?None())> filter
    with
      filterStr := <p2k-filter-match> filter

  p2k-exp:
    ListPath(exp, filterOpt) -> $[requireOutput(ListContents::class.java, ListContents.id, ListContents.Input([expStr], [filterStr]))]
    with
      expStr    := <p2k-exp> exp
    ; filterStr := <p2k-filter-match> filterOpt
    
  p2k-exp:
    WalkPath(exp, filterOpt) -> $[requireOutput(WalkContents::class.java, WalkContents.id, WalkContents.Input([expStr], [filterStr]))]
    with
      expStr    := <p2k-exp> exp
    ; filterStr := <p2k-filter-walk> filterOpt
      
  p2k-filter-match:
    None() -> $[null]
  p2k-filter-match:
    Regex(exp) -> $[PPaths.regexPathMatcher([expStr])]
    with
      expStr := <try-p2k-exp> exp
  p2k-filter-match:
    _ -> $[PPaths.patternsPathMatcher([expStr])]
    where ?Pattern(exp) + ?Patterns(exp)
    with
      expStr := <try-p2k-exp> exp
  p2k-filter-match:
    _ -> $[PPaths.extensionsPathMatcher([expStr])]
    where ?Extension(exp) + ?Extensions(exp)
    with
      expStr := <try-p2k-exp> exp
      
  p2k-filter-walk:
    None() -> $[null]
  p2k-filter-walk:
    Regex(exp) -> $[PPaths.regexPathWalker([expStr])]
    with
      expStr := <try-p2k-exp> exp
  p2k-filter-walk:
    _ -> $[PPaths.patternsPathWalker([expStr])]
    where ?Pattern(exp) + ?Patterns(exp)
    with
      expStr := <try-p2k-exp> exp
  p2k-filter-walk:
    _ -> $[PPaths.extensionsPathWalker([expStr])]
    where ?Extension(exp) + ?Extensions(exp)
    with
      expStr := <try-p2k-exp> exp


  p2k-exp:
    ReadPath(exp) -> $[requireOutput(Read::class.java, Read.id, [expStr])]
    with
      expStr := <p2k-exp> exp
      
  p2k-exp:
    ExistsPath(exp) -> $[requireOutput(Exists::class.java, Exists.id, [expStr])]
    with
      expStr := <p2k-exp> exp

rules // Early return and failure

  p2k-exp:
    Return(exp) -> $[return [expStr]]
    with
      expStr := <p2k-funcdef-returnvalue> exp

  p2k-exp:
    Fail(exp) -> $[throw ExecException([expStr].toString())]
    with
      expStr := <try-p2k-exp> exp

rules // Literals

  p2k-exp: UnitLit()        -> $[Unit.instance]
  p2k-exp: BoolLit(True())  -> $[true]
  p2k-exp: BoolLit(False()) -> $[false]
  p2k-exp: IntLit(i)        -> i
  p2k-exp: NullLit()        -> $[null]


  p2k-exp:
    TupleLit(exps) -> $[tuple([expsStr])]
    with
      expsStr := <map(try-p2k-exp); pie-concat-comma> exps
    
  p2k-exp:
    ListLit(exps) -> $[list([expsStr])]
    with
      expsStr := <map(try-p2k-exp); pie-concat-comma> exps

rules // Interpolated string literal

  p2k-exp:
    StrLit(parts) -> $["[partsStr]"]
    with
      partsStr := <map(p2k-strpart); concat-strings> parts

  p2k-strpart:
    Str(chars) -> chars

  p2k-strpart:
    StrInterpRef(refExp) -> $[${[refExpStr]}]
    with
      refExpStr := <try-p2k-exp> refExp

  p2k-strpart:
    StrInterpExp(exp) -> $[${[expStr]}]
    with
      expStr := <try-p2k-exp> exp

rules // Interpolated path literal

  p2k-exp:
    PathLit(prefix, parts) -> $[PPathImpl(java.nio.file.FileSystems.getDefault().getPath("[prefix][partsStr]"))]
    with
      partsStr := <map(p2k-strpart); concat-strings> parts

  p2k-strpart:
    Path(chars) -> chars

  p2k-strpart:
    PathInterpRef(refExp) -> $[${[refExpStr]}]
    with
      refExpStr := <try-p2k-exp> refExp

  p2k-strpart:
    PathInterpExp(exp) -> $[${[expStr]}]
    with
      expStr := <try-p2k-exp> exp
