module impl/pipe

imports

  lex/literal
  type
  func

context-free syntax

  DataImpl =

context-free syntax

  FuncImpl.FuncImpl = <<Block>>

context-free syntax

  Block.Block = <{
  <{Stm "\n"}*>
}>
  Stm = <<Block>>

  Binder.SingleBinder = <<Bind>>
  Binder.TupleBinder  = <(<{Bind ", "}*>)>

  Bind.Bind  = <<ID>>
  Bind.TBind = <<ID> : <Type>>

  Stm.ValDec = <val <Binder> = <Exp>;>
  
  ListComprehension.ListComprehension = <<Exp> | <Binder> \<- <Exp>>
  Stm.ListComprehensionStm = <<ListComprehension>;>
  
  Stm.Return = <return <Exp>;>
  Stm.Fail = <fail <Exp>;>
  
  Stm.Exp = <<Exp>;>

context-free syntax

  Exp.ToNullable    = <<Exp>?>
  Exp.ToNonNullable = <<Exp>!>
  Exp.Not           = <!<Exp>>

  Exp.Eq   = <<Exp> == <Exp>> {left}
  Exp.Neq  = <<Exp> != <Exp>> {left}
  Exp.Lor  = <<Exp> || <Exp>> {left}
  Exp.Land = <<Exp> && <Exp>> {left}
  Exp.Add  = <<Exp> + <Exp>>  {left}
  
  Exp.If     = <if(<Exp>) <Exp>>
  Exp.IfElse = <if(<Exp>) <Exp> else <Exp>>

  Exp.ListComprehensionExp = <[<ListComprehension>]>

  Ref.Ref = <<ID>> {avoid}
  Exp     = Ref
  
  Exp.Call  = <<FUNCID>(<{Exp ", "}*>)>
  Exp.QCall = <<Exp>.<FUNCID>(<{Exp ", "}*>)>

  Exp.RequiresPath        = <requires <Exp> <StamperPart?>>
  Exp.GeneratesPath       = <generates <Exp> <StamperPart?>>
  StamperPart.StamperPart = <by <StampKind>>
  StampKind.Modified      = <modified>
  StampKind.Hash          = <hash>
  
  Exp.ListPath            = <list <Exp> <FilterPart?>>
  Exp.WalkPath            = <walk <Exp> <FilterPart?>>
  FilterPart.FilterPart   = <with <Filter>>
  Filter.Pattern          = <pattern <Exp>>
  
  Exp.ReadPath            = <read <Exp>>

  Exp.BoolLit = <<Bool>>
  Bool.True   = <true>
  Bool.False  = <false>

  Exp.IntLit  = <<INT>>
  Exp.PathLit = <<PATH>>

  Exp.NullLit = <null>

  Exp.TupleLit = <(<{Exp ","}*>)>
  Exp.ListLit  = <[<{Exp ","}*>]>

  // Exp = <(<Exp>)> {bracket}

syntax // Interpolated string

  Exp-CF.StrLit = "\"" StrPart-CF* "\""
  
  StrPart-CF.Str          = StrChars-LEX
  StrPart-CF.StrInterpRef = "$" Ref-CF
  StrPart-CF.StrInterpExp =  "${" Exp-CF "}"
  
lexical syntax

  StrChars = StrChar+
  StrChar = ~[\"\$\n\r]
  StrChar = "\\\""

lexical restrictions

  StrChars -/- ~[\"\$\n\r]

context-free priorities

  { left: Exp.Eq Exp.Neq } > { left: Exp.Lor Exp.Land }

lexical syntax

  FUNCID = "return" {reject}
  FUNCID = "foreach" {reject}
