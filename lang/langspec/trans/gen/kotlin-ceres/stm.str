module gen/kotlin-ceres/stm

imports

  signatures/-
  signatures/lex/-
  signatures/impl/-
  
  statsem/program
  
  gen/kotlin-ceres/exp
  gen/kotlin-ceres/binder
  gen/kotlin-ceres/listcomprehension
  gen/kotlin/type2kotlin
  gen/idtype-tuples
  gen/util
  gen/debug

rules

  try-p2c-stm    = pipe-try-debug(p2c-stm|"p2c-stm") <+ !"{}"
  p2c-stms       = p2c-stms(|"\n")
  p2c-stms(|sep) = map(try-p2c-stm); separate-by(|sep); concat-strings

rules

  p2c-stm:
    Block(stms) -> 
$[{
  [str]
}]
    with
      str := <p2c-stms> stms

rules // Value declaration

  p2c-stm:
    ValDec(binder, exp) -> $[val [binderStr] = [expStr]]
    with
      binderStr := <p2c-binder> binder
    ; expStr    := <try-p2c-exp> exp

rules // List comprehension

  p2c-stm:
    ListComprehensionStm(inner) -> $[[comprehension].forEach { }]
    with
      comprehension := <p2c-listcomprehension> inner

rules // Return and fail

  p2c-stm:
    Return(exp) -> $[return output([expStr])]
    where
      <pipe-ast-type; (?TupleTy(_) <+ NullableTy(?TupleTy(_)))> exp
    with
      expStr := <try-p2c-exp> exp

  p2c-stm:
    Return(exp) -> $[return [expStr]]
    where
      <pipe-ast-type; not(?TupleTy(_))> exp
    with
      expStr := <try-p2c-exp> exp


  p2c-stm:
    Fail(exp) -> $[throw BuildException([expStr].toString())]
    with
      expStr := <try-p2c-exp> exp

rules // Expression as statement

  p2c-stm:
    Exp(exp) -> $[[expStr]]
    with
      expStr := <try-p2c-exp> exp
