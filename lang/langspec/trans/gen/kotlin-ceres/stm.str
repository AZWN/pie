module gen/kotlin-ceres/stm

imports

  signatures/-
  signatures/lex/-
  signatures/impl/-
  
  statsem/program
  
  gen/kotlin-ceres/exp
  gen/kotlin/type2kotlin
  gen/idtype-tuples
  gen/util
  gen/debug

rules

  try-p2c-stm    = pipe-try-debug(p2c-stm|"p2c-stm") <+ !"{}"
  p2c-stms       = p2c-stms(|"\n")
  p2c-stms(|sep) = map(try-p2c-stm); separate-by(|sep); concat-strings

rules

  p2c-stm:
    Block(stms) -> 
$[{
  [str]
}]
    with
      str := <p2c-stms> stms

rules // Bindings and assignment

  p2c-stm:
    ValDec(SingleBinder(bind), exp) -> $[val [bindStr] = [expStr]]
    with
      bindStr := <p2c-bind-tostr> bind
    ; expStr  := <try-p2c-exp> exp
  
  p2c-stm:
    ValDec(TupleBinder(binds), exp) -> $[val ([bindsStr]) = [expStr]]
    with
      expStr   := <try-p2c-exp> exp
    ; bindsStr := <map(p2c-bind-tostr); pipe-sep-comma; concat-strings> binds

  p2c-bind-tostr: Bind(varId)      -> $[[varId]]
  p2c-bind-tostr: TBind(varId, ty) -> $[[varId] : [[<t2k-sig> ty]]]

//  p2c-stm:
//    VarDec(varId, type) -> $[var [varId] : [tyStr]]
//    with
//      tyStr := <t2k-sig> type
//
//  p2c-stm:
//    Assign(Ref(varId), exp) -> $[[varId] = [expStr]]
//    with
//      expStr := <try-p2c-exp> exp

rules // Control flow

//  p2c-stm:
//    ForEach(SingleBinder(bind), exp, stm) -> $[for([bindStr] in [expStr]) [strStm]]
//    with
//      bindStr := <p2c-bind-tostr> bind
//    ; expStr  := <try-p2c-exp> exp
//    ; strStm  := <try-p2c-stm> stm
//
//  p2c-stm:
//    ForEach(TupleBinder(binds), exp, stm) -> $[for(([bindsStr]) in [expStr]) [strStm]]
//    with
//      bindsStr := <map(p2c-bind-tostr); pipe-sep-comma; concat-strings> binds
//    ; expStr   := <try-p2c-exp> exp
//    ; strStm   := <try-p2c-stm> stm

rules // Return and fail

  p2c-stm:
    Return(exp) -> $[return output([expStr])]
    where
      <pipe-ast-type; (?TupleTy(_) <+ NullableTy(?TupleTy(_)))> exp
    with
      expStr := <try-p2c-exp> exp

  p2c-stm:
    Return(exp) -> $[return [expStr]]
    where
      <pipe-ast-type; not(?TupleTy(_))> exp
    with
      expStr := <try-p2c-exp> exp


  p2c-stm:
    Fail(exp) -> $[throw BuildException([expStr].toString())]
    with
      expStr := <try-p2c-exp> exp

rules // Expression as statement

  p2c-stm:
    Exp(exp) -> $[[expStr]]
    with
      expStr := <try-p2c-exp> exp
