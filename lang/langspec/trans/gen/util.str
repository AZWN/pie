module gen/util

imports

  nabl2/api
  gen/kotlin-ceres/core

rules // Generic strategies for getting properties and types of anything

  pipe-prop(|ns, prop):
    t -> <pipe-occ-prop(|prop)> t
    where
      <nabl2-get-occurrence-ns> t
      
  pipe-prop(|ns, prop):
    t -> <pipe-ast-ref-prop(|ns, prop)> t
    where
      <not(nabl2-get-occurrence-ns); is-string> t

  pipe-type(|ns) = pipe-prop(|ns, "type")
  
  pipe-type:
    t -> <pipe-ast-type> t
    where
      <not(nabl2-get-occurrence-ns); not(is-string)> t

rules // AST type

  pipe-ast-type = nabl2-get-ast-type
  
rules // Property of reference in the AST
  
  pipe-ast-ref-prop(|ns, prop):
    term -> val
    with
      a      := <AstAnalysis>
    ; refOcc := <nabl2-mk-occurrence(|ns)> term
    ; defOcc := <nabl2-get-resolved-name(|a); Fst> refOcc
    ; val    := <nabl2-get-property(|a, prop)> defOcc
  
  pipe-ast-ref-type(|ns) = pipe-ast-ref-prop(|ns, "type")

rules // Property of occurrence
  
  pipe-occ-prop(|prop):
    occ -> val
    with
      a   := <AstAnalysis>
    ; val := <nabl2-get-property(|a, prop)> occ

  pipe-occ-type = pipe-occ-prop(|"type")

rules

  pipe-sep-nl    = separate-by(|"\n")
  pipe-sep-comma = separate-by(|", ")
  pipe-sep-space = separate-by(|" ")
  
  pipe-remove-emptystrings = filter(not(?""))
  
  pipe-sep-concat(|sep) = pipe-remove-emptystrings; separate-by(|sep); concat-strings
  pipe-concat-nl = pipe-sep-concat(|"\n")
  pipe-concat-comma = pipe-sep-concat(|", ")
  pipe-concat-space = pipe-sep-concat(|" ")
  
  pipe-prepend-comma-nonempty: 
    [] -> []
  pipe-prepend-comma-nonempty: 
    list -> [", "|list]
    where
      <not(?[])> list

rules

  pipe-sanitize-class-id = string-replace(|"-", "_")
