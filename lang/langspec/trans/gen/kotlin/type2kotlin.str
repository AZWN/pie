module gen/kotlin/type2kotlin

imports

  libspoofax/stratego/debug

  signatures/-
  signatures/lex/-
  signatures/impl/-

  statsem/program
  
  gen/idtype-tuples
  gen/util

rules

  t2k-sig: VoidTy() -> "None"
  t2k-sig: BoolTy() -> "Boolean"
  t2k-sig: IntTy()  -> "Int"
  t2k-sig: StrTy()  -> "String"
  t2k-sig: TopTy()  -> "Any"

  t2k-sig:
    DataTy(occ) -> javaClassId
    where 
      JavaTypeKind() := <pipe-prop(|"Type", "kind")> occ
    ; <pipe-prop(|"Type", "mods"); not(collect-one(?Transient()))> occ
    with  
      javaClassId := <pipe-prop(|"Type", "javaClassId")> occ

  t2k-sig:
    DataTy(occ) -> $[OutTransient<[javaClassId]>]
    where 
      JavaTypeKind() := <pipe-prop(|"Type", "kind")> occ
    ; <pipe-prop(|"Type", "mods"); collect-one(?Transient())> occ
    with  
      javaClassId := <pipe-prop(|"Type", "javaClassId")> occ


  t2k-sig: 
    TupleTy(tys) -> $[Tuple[length]<[tyStr]>]
    with
      length := <length> tys
    ; tyStr  := <map(t2k-sig); pipe-concat-comma> tys

  t2k-sig: ListTy(ty)     -> $[ArrayList<[<t2k-sig> ty]>]
  t2k-sig: NullableTy(ty) -> $[[<t2k-sig> ty]?]
  
rules

  t2k-generate-dataclass(|name):
    idTypeTuples -> 
$[data class [name]([params]) : [tupleSig] {
  constructor(tuple: [tupleSig]): this([constructorCall])
}]
    with
      paramStrs       := <map(\(typeId, ty) -> $[val [typeId] : [<t2k-sig> ty]]\)> idTypeTuples
    ; params          := <pipe-sep-comma; concat-strings> paramStrs
    ; tys             := <map(Snd)> idTypeTuples
    ; tupleSig        := <t2k-sig> TupleTy(tys)
    ; constructorCall := <range; map(\i -> $[tuple.component[i]()]\); pipe-concat-comma> (1, <length; inc> tys)

