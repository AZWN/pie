module gen/java/type

imports

  libspoofax/stratego/debug

  signatures/-
  signatures/lex/-
  signatures/impl/-

  statsem/pie
  
  gen/idtype-tuples
  gen/util

rules

  p2j-type-sig: UnitTy() -> "Void"
  p2j-type-sig: BoolTy() -> "Boolean"
  p2j-type-sig: IntTy()  -> "Integer"
  p2j-type-sig: StrTy()  -> "String"
  p2j-type-sig: PathTy() -> "Path"
  p2j-type-sig: TopTy()  -> "Object"

  p2j-type-sig:
    DataTy(occ) -> javaClassId
    where 
      JavaTypeKind() := <pie-prop(|"Type", "kind")> occ
    ; <pie-prop(|"Type", "mods"); not(collect-one(?Transient()))> occ
    with  
      javaClassId := <pie-prop(|"Type", "javaClassId")> occ

  p2j-type-sig:
    DataTy(occ) -> $[OutTransient<[javaClassId]>]
    where 
      JavaTypeKind() := <pie-prop(|"Type", "kind")> occ
    ; <pie-prop(|"Type", "mods"); collect-one(?Transient())> occ
    with  
      javaClassId := <pie-prop(|"Type", "javaClassId")> occ


  p2j-type-sig: 
    TupleTy(tys) -> $[Tuple[length]<[tyStr]>]
    with
      length := <length> tys
    ; tyStr  := <map(p2j-type-sig); pie-concat-comma> tys

  p2j-type-sig: ListTy(ty)     -> $[ArrayList<[<p2j-type-sig> ty]>]
  p2j-type-sig: NullableTy(ty) -> $[[<p2j-type-sig> ty]]
  
rules

  p2j-type-generate-dataclass(|name):
    idTypeTuples -> 
$[public final class [name] implements Serializable {
  [fields]
  
  public [name]([params]) {
    [assignments]
  }
}]
    with
      tys             := <map(Snd)> idTypeTuples
    ; typeStrs        := <map(p2j-type-sig)> tys
    ; idTypeStrTuples := <zip> (<map(Fst)> idTypeTuples, typeStrs)
    ; fieldStrs       := <map(type-tuple-to-field)> idTypeStrTuples
    ; fields          := <pie-concat-nl> fieldStrs
    ; paramStrs       := <map(type-tuple-to-param)> idTypeStrTuples
    ; params          := <pie-concat-commanl> paramStrs
    ; assignmentStrs  := <map(type-tuple-to-assignment)> idTypeStrTuples
    ; assignments     := <pie-concat-nl> assignmentStrs

  type-tuple-to-field: (varId, ty) -> $[public final [ty] [varId];]
  type-tuple-to-param: (varId, ty) -> $[[ty] [varId]]
  type-tuple-to-assignment: (varId, ty) -> $[this.[varId] = [varId];]
